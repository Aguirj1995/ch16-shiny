setwd("~/Desktop/info201/ch16-shiny/exercise-1")
shiny::runApp()
runApp()
runApp()
setwd("~/Desktop/info201/ch16-shiny/exercise-1")
shiny::runApp()
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage()
View(ui)
# A top level header: "First Shiny Website"
h1("First Shiny Website")
# A top level header: "First Shiny Website"
h1("First Shiny Website"),
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage(h1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Install and load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage( titlePanel("Cost Calculator"))
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage( titlePanel("Cost Calculator"))
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output){
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage( titlePanel("Cost Calculator"))
runApp('~/Desktop/info201/ch16-shiny/exercise-2')
runApp('~/Desktop/info201/ch16-shiny/exercise-2')
runApp('~/Desktop/info201/ch16-shiny/exercise-2')
runApp('~/Desktop/info201/ch16-shiny/exercise-2')
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output){
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(paste0("$", input$price * input$quantity))
})
}
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(paste0("$", input$price * input$quantity))
})
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('~/Desktop/info201/ch16-shiny/exercise-2')
runApp('~/Desktop/info201/ch16-shiny/exercise-2')
runApp('~/Desktop/info201/ch16-shiny/exercise-2')
()
runApp('~/Desktop/info201/ch16-shiny/exercise-2')
runApp('~/Desktop/info201/ch16-shiny/exercise-2')
shiny::runApp()
setwd("~/Desktop/info201/ch16-shiny/exercise-3")
setwd("~/Desktop/info201/ch16-shiny/exercise-3")
library(shiny)
library(ggplot2)
# UI for scatterplot
library(shiny)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidpage)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(ui)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
runApp()
runApp('~/Desktop/info201/ch16-shiny/exercise-1')
rsconnect::setAccountInfo(name='aguirj1995',
token='ADBF7DB2DE5E9F3D7ED218A949D4B568',
secret='<SECRET>')
rsconnect::setAccountInfo(name='aguirj1995',
token='ADBF7DB2DE5E9F3D7ED218A949D4B568',
secret='<SECRET>')
setwd("~/Desktop/info201/ch16-shiny/exercise-1")
rsconnect::setAccountInfo(name='aguirj1995',
token='ADBF7DB2DE5E9F3D7ED218A949D4B568',
secret='<SECRET>')
runApp()
rsconnect::setAccountInfo(name='aguirj1995',
token='ADBF7DB2DE5E9F3D7ED218A949D4B568',
secret='<SECRET>')
